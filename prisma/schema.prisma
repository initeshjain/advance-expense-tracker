// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  nickname      String?
  accounts      Account[]
  sessions      Session[]
  
  // Expense relationships
  createdExpenses    Expense[] @relation("ExpenseCreator")
  expenseParticipants ExpenseParticipant[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  color       String    @default("#3B82F6")
  isDefault   Boolean   @default(false)
  createdBy   String?   @db.ObjectId
  expenses    Expense[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Expense {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  amount      Float
  currency    String   @default("INR")
  
  // Relationships
  categoryId  String   @db.ObjectId
  category    Category @relation(fields: [categoryId], references: [id])
  
  createdById String   @db.ObjectId
  createdBy   User     @relation("ExpenseCreator", fields: [createdById], references: [id])
  
  // Split expense
  isSplit     Boolean  @default(false)
  participants ExpenseParticipant[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ExpenseParticipant {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  
  expenseId String  @db.ObjectId
  expense   Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  
  // Split details
  shareAmount Float
  isPaid      Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([expenseId, userId])
}

model PendingUser {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  email     String @unique
  nickname  String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}